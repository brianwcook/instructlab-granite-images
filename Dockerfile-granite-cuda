FROM nvidia/cuda:12.6.1-devel-ubi9 

WORKDIR /srv

# install build tools and clone and compile llama.cpp

RUN dnf -y update && dnf install -y git make automake gcc gcc-c++ llvm-toolset wget cmake libcurl-devel

ARG CUDA_DOCKER_ARCH=all

RUN export CMAKE_ARGS="-DCMAKE_CUDA_ARCHITECTURES=${CUDA_DOCKER_ARCH}";

RUN git clone https://github.com/ggerganov/llama.cpp.git

RUN cd llama.cpp \
  && cmake -B build -DGGML_CUDA=ON -DLLAMA_CURL=ON ${CMAKE_ARGS} -DCMAKE_EXE_LINKER_FLAGS=-Wl,--allow-shlib-undefined . && \
  cmake --build build --config Release -j$(nproc) 

RUN wget https://huggingface.co/instructlab/granite-7b-lab-GGUF/resolve/main/granite-7b-lab-Q4_K_M.gguf -P /models
FROM registry.access.redhat.com/ubi9/ubi-minimal AS env-deploy

# copy openmp and cuda libraries
ENV LD_LIBRARY_PATH=/usr/local/lib

COPY --from=0 /usr/local/cuda-12.6/compat/libcuda.so.1 ${LD_LIBRARY_PATH}/libcuda.so.1
COPY --from=0  /srv/llama.cpp/build/src/libllama.so ${LD_LIBRARY_PATH}/libllama.so
COPY --from=0  /srv/llama.cpp/build/ggml/src/libggml.so ${LD_LIBRARY_PATH}/libggml.so
COPY --from=0  /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcudart.so.12 ${LD_LIBRARY_PATH}/libcudart.so.12
COPY --from=0  /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcublas.so.12 ${LD_LIBRARY_PATH}/libcublas.so.12
COPY --from=0  /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcublasLt.so.12 ${LD_LIBRARY_PATH}/libcublasLt.so.12
COPY --from=0  /usr/lib64/libgomp.so.1 ${LD_LIBRARY_PATH}/libgomp.so.1
COPY --from=0  /usr/lib64/libm.so.6 ${LD_LIBRARY_PATH}/libm.so.6
COPY --from=0  /usr/lib64/libc.so.6 ${LD_LIBRARY_PATH}/libc.so.6
COPY --from=0  /usr/lib64/libstdc++.so.6 ${LD_LIBRARY_PATH}/libstdc++.so.6
COPY --from=0  /srv/llama.cpp/build/bin/llama-cli /usr/local/bin/llama-cli
COPY --from=0  /srv/llama.cpp/build/bin/llama-server /usr/local/bin/llama-server
COPY --from=0  /models/granite-7b-lab-Q4_K_M.gguf /models/granite-7b-lab-Q4_K_M.gguf

# copy and set entrypoint script
COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN ["chmod", "+x", "/usr/local/bin/docker-entrypoint.sh"]


EXPOSE 8080


ENTRYPOINT [ "/usr/local/bin/docker-entrypoint.sh" ]